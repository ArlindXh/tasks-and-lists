service: serverless-boilerplate

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  region: us-east-1
  timeout: 10 
  memorySize: 512 
  versionFunctions: false 
  package:
    excludeDevDependencies: true
    exclude:
      - .git/**
      - .vscode/**
      - .test/**

  iamRoleStatements: # Permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:*"

    - Effect: Allow
      Action: # Gives permission to Lambda execution
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

custom:
  region: ${self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:custom.stage}-${self:service}
  process: ${self:custom.prefix}-process
  config: ${self:custom.prefix}-config

  serverless-offline:
    host: "0.0.0.0"

  splitStacks:
    perFunction: true
    perType: true

  dynamodb:
    stages:
      - local
      - test
      - dev

    start:
      host: "dynamo"
      port: 8000
      inMemory: false
      migrate: true
      noStart: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:
  TasksAndSubtasks:
    handler: functions/tasksAndSubtasks.handler
    events:
      - http:
          path: /tasks/get/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /tasks/get
          method: get
          cors: true
      - http:
          path: /create
          method: post
      - http:
          path: /edit/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /delete/{type}/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                type: true
                id: true
  
  Lists:
    handler: functions/lists.handler
    events:
      - http:
          path: /lists/get/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /lists/get
          method: get
          cors: true
      - http:
          path: /lists/create
          method: post
      - http:
          path: lists/edit/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
      - http:
          path: lists/delete/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
  

resources: # CloudFormation template syntax
  Resources:
    TasksAndLists:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TasksAndLists
        AttributeDefinitions:
          - AttributeName: unique_id
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: unique_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1
